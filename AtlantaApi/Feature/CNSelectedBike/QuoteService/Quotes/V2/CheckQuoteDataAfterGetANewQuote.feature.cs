// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AtlantaApi.Feature.CNSelectedBike.QuoteService.Quotes.V2
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CheckQuoteDataAfterGetANewQuoteFeature : object, Xunit.IClassFixture<CheckQuoteDataAfterGetANewQuoteFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CheckQuoteDataAfterGetANewQuote.feature"
#line hidden
        
        public CheckQuoteDataAfterGetANewQuoteFeature(CheckQuoteDataAfterGetANewQuoteFeature.FixtureData fixtureData, AtlantaApi_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature/CNSelectedBike/QuoteService/Quotes/V2", "CheckQuoteDataAfterGetANewQuote", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Check Quote data table in DB after get a new quote")]
        [Xunit.TraitAttribute("FeatureTitle", "CheckQuoteDataAfterGetANewQuote")]
        [Xunit.TraitAttribute("Description", "Check Quote data table in DB after get a new quote")]
        [Xunit.TraitAttribute("Category", "CheckQuoteData")]
        [Xunit.InlineDataAttribute("", "null", "V2", "CNSelectBikeContext", new string[0])]
        public virtual void CheckQuoteDataTableInDBAfterGetANewQuote(string path, string value, string apiVersion, string contextName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CheckQuoteData"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Path", path);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ApiVersion", apiVersion);
            argumentsOfScenario.Add("ContextName", contextName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check Quote data table in DB after get a new quote", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table188.AddRow(new string[] {
                            "QuoteRequestBody",
                            "ValidQuoteForPrepurchase.json"});
#line 5
 testRunner.Given("User has quote body", ((string)(null)), table188, "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("User send a quote request {0} and {1}", apiVersion, contextName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then(string.Format("The PerchaseDetails should have the following values with {0} and {1}", path, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Check Quote data table in DB after update a quote")]
        [Xunit.TraitAttribute("FeatureTitle", "CheckQuoteDataAfterGetANewQuote")]
        [Xunit.TraitAttribute("Description", "Check Quote data table in DB after update a quote")]
        [Xunit.TraitAttribute("Category", "CheckQuoteData")]
        [Xunit.InlineDataAttribute("", "null", "V2", "CNSelectBikeContext", new string[0])]
        public virtual void CheckQuoteDataTableInDBAfterUpdateAQuote(string path, string value, string apiVersion, string contextName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CheckQuoteData"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Path", path);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("ApiVersion", apiVersion);
            argumentsOfScenario.Add("ContextName", contextName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check Quote data table in DB after update a quote", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table189.AddRow(new string[] {
                            "QuoteRequestBody",
                            "ValidQuoteForPrepurchase.json"});
#line 17
 testRunner.Given("User has quote body", ((string)(null)), table189, "Given ");
#line hidden
#line 20
 testRunner.When(string.Format("User update a quote request {0} and {1}", apiVersion, contextName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then(string.Format("The PerchaseDetails should have the following values with {0} and {1}", path, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CheckQuoteDataAfterGetANewQuoteFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CheckQuoteDataAfterGetANewQuoteFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

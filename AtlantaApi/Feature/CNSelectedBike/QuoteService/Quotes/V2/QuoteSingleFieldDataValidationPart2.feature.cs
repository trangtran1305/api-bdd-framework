// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AtlantaApi.Feature.CNSelectedBike.QuoteService.Quotes.V2
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "CNSBike")]
    public partial class QuoteSingleFieldDataValidationCasesPart2Feature : object, Xunit.IClassFixture<QuoteSingleFieldDataValidationCasesPart2Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "CNSBike"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "QuoteSingleFieldDataValidationPart2.feature"
#line hidden
        
        public QuoteSingleFieldDataValidationCasesPart2Feature(QuoteSingleFieldDataValidationCasesPart2Feature.FixtureData fixtureData, AtlantaApi_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature/CNSelectedBike/QuoteService/Quotes/V2", "QuoteSingleFieldDataValidationCasesPart2", null, ProgrammingLanguage.CSharp, new string[] {
                        "CNSBike"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="ValiDate quote API on each field")]
        [Xunit.TraitAttribute("FeatureTitle", "QuoteSingleFieldDataValidationCasesPart2")]
        [Xunit.TraitAttribute("Description", "ValiDate quote API on each field")]
        [Xunit.TraitAttribute("Category", "QuoteServices")]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Title", "", "", "\"\"", "400", "FALSE", "Title is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Forenames", "", "", "missing", "400", "FALSE", "Forenames is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Forenames", "", "", "null", "400", "FALSE", "Forenames is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Forenames", "", "", "\"\"", "400", "FALSE", "Forenames is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Forenames", "", "", "Mrs abcdrertyuioghjklmbnhghyjun", "400", "FALSE", "Forenames can not be over 30 characters.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Surname", "", "", "missing", "400", "FALSE", "Surname is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Surname", "", "", "null", "400", "FALSE", "Surname is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Surname", "", "", "\"\"", "400", "FALSE", "Surname is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Surname", "", "", "Mrs abcdrertyuioghjklmbnhghyjun", "400", "FALSE", "Surname can not be over 20 characters.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "DateOfBirth", "", "", "missing", "400", "FALSE", "DateOfBirth is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "DateOfBirth", "", "", "null", "400", "FALSE", "DateOfBirth is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "DateOfBirth", "", "", "\"\"", "400", "FALSE", "DateOfBirth is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "UKResidentSinceDate", "", "", "missing", "400", "FALSE", "UKResidentSinceDate is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "UKResidentSinceDate", "", "", "null", "400", "FALSE", "UKResidentSinceDate is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "UKResidentSinceDate", "", "", "\"\"", "400", "FALSE", "UKResidentSinceDate is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "UKResidentSinceDate", "", "", "1969-12-16T00:00:00", "400", "FALSE", "something went wrong", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "MaritalStatus", "", "", "missing", "400", "FALSE", "MaritalStatus is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "MaritalStatus", "", "", "null", "400", "FALSE", "MaritalStatus is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "MaritalStatus", "", "", "\"\"", "400", "FALSE", "MaritalStatus is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "", "", "missing", "400", "FALSE", "At least one Employment is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "", "", "null", "400", "FALSE", "At least one Employment is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "", "", "File: ProposerEmployment602CNSBike.json", "400", "FALSE", "At least one Employment is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "Type", "", "missing", "400", "FALSE", "Employment - Typeis required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "Type", "", "null", "400", "FALSE", "Employment - Typeis required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "Type", "", "\"\"", "400", "FALSE", "Employment - Typeis required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "Type", "", "Test", "400", "FALSE", "Employment - Type must be fulltime/parttime/selfemployed.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "EmploymentCode", "", "missing", "400", "FALSE", "Employment - EmploymentCode is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "EmploymentCode", "", "null", "400", "FALSE", "Employment - EmploymentCode is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "EmploymentCode", "", "\"\"", "400", "FALSE", "Employment - EmploymentCode is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "OccupationCode", "", "missing", "400", "FALSE", "Employment - OCcupationCode is required with EmploymentCode # R, U, H.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "OccupationCode", "", "null", "400", "FALSE", "Employment - OCcupationCode is required with EmploymentCode # R, U, H.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Employment", "OccupationCode", "", "\"\"", "400", "FALSE", "Employment - OCcupationCode is required with EmploymentCode # R, U, H.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "DrivingLicence", "Type", "", "missing", "400", "FALSE", "Driving Licence - Type is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "DrivingLicence", "Type", "", "null", "400", "FALSE", "Driving Licence - Type is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "DrivingLicence", "Type", "", "\"\"", "400", "FALSE", "Driving Licence - Type is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "DrivingLicence", "DateObtained", "", "missing", "400", "FALSE", "Licence date is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "DrivingLicence", "DateObtained", "", "null", "400", "FALSE", "Licence date is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "DrivingLicence", "DateObtained", "", "\"\"", "400", "FALSE", "Licence date is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "DrivingLicence", "DateObtained", "", "2021-12-16T00:00:00", "200", "TRUE", "Get quote successfully", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "PhoneNumbers", "Type", "", "missing", "400", "FALSE", "PhoneNumber - Type is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "PhoneNumbers", "Type", "", "null", "400", "FALSE", "PhoneNumber - Type is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "PhoneNumbers", "Type", "", "\"\"", "400", "FALSE", "PhoneNumber - Type is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "PhoneNumbers", "Number", "", "missing", "400", "FALSE", "PhoneNumber - Number is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "PhoneNumbers", "Number", "", "null", "400", "FALSE", "PhoneNumber - Number is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "PhoneNumbers", "Number", "", "\"\"", "400", "FALSE", "PhoneNumber - Number is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "PhoneNumbers", "Number", "", "12345678", "400", "FALSE", "PhoneNumber - Number must be from 9 ~ 14 characters.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "PhoneNumbers", "Number", "", "123456789123456", "400", "FALSE", "PhoneNumber - Number must be from 9 ~ 14 characters.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Address", "AddressLine1", "", "UK road 12UK road 12UK road 12123", "400", "FALSE", "AddressLine1 cannot be over 32 characters.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Address", "AddressLine2", "", "UK road 12UK road 12UK road 12123", "400", "FALSE", "AddressLine2 cannot be over 32 characters.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Address", "AddressLine3", "", "UK road 12UK road 12UK road 12123", "400", "FALSE", "AddressLine3 cannot be over 32 characters.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Address", "AddressLine4", "", "UK road 12UK road 12UK road 12123", "400", "FALSE", "AddressLine4 cannot be over 32 characters.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Address", "AddressLine5", "", "UK road 12UK road 12UK road 12123", "400", "FALSE", "AddressLine5 cannot be over 32 characters.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "Address", "PostCode", "", "EC2N 94AY", "400", "FALSE", "PostCode is invalid.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "AdditionalDrivers", "EmailAddress", "", "", "thuongnguyenthiminh@nashtech", "400", "FALSE", "something went wrong", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "", "", "", "File: VehicleVehicleDetail782CNSBike.json", "400", "FALSE", "At least one vehicle element must be added.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "", "", "", "null", "400", "FALSE", "At least one vehicle element must be added.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "", "", "", "missing", "400", "FALSE", "At least one vehicle element must be added.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "", "", "", "File: VehicleVehicleDetail787CNSBike.json", "400", "FALSE", "Vehicle elements cannot be over 4.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "VRN", "", "", "\"*Abc A", "400", "FALSE", "VRN is incorrect.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "VRN", "", "", "Q874 9FP", "400", "FALSE", "VRN with Q registration plate is unaCceptable.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "ABICode", "", "", "\"\"", "400", "FALSE", "AbiCode is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "ABICode", "", "", "null", "400", "FALSE", "AbiCode is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "ABICode", "", "", "missing", "400", "FALSE", "AbiCode is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "ABICode", "", "", "123456", "400", "FALSE", "AbiCode is incorrect.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "YearOfManufacture", "", "", "\"\"", "400", "FALSE", "YearOfManufacture is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "YearOfManufacture", "", "", "null", "400", "FALSE", "YearOfManufacture is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "YearOfManufacture", "", "", "missing", "400", "FALSE", "YearOfManufacture is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "YearOfManufacture", "", "", "1928", "400", "FALSE", "YearOfManufacture is incorrect.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "EngineCc", "", "", "\"\"", "400", "FALSE", "EngineCc is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "EngineCc", "", "", "null", "400", "FALSE", "EngineCc is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "EngineCc", "", "", "missing", "400", "FALSE", "EngineCc is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "EngineCc", "", "", "-1", "400", "FALSE", "EngineCc must be greater than or equal 0.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "EngineCc", "", "", "3.14", "400", "FALSE", "EngineCc must be greater than or equal 0.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "EngineCc", "", "", "abc", "400", "FALSE", "EngineCc must be greater than or equal 0.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "Manufacturer", "", "", "\"\"", "400", "FALSE", "Manufacturer is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "Manufacturer", "", "", "null", "400", "FALSE", "Manufacturer is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "Manufacturer", "", "", "missing", "400", "FALSE", "Manufacturer is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "Model", "", "", "\"\"", "400", "FALSE", "Model is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "Model", "", "", "null", "400", "FALSE", "Model is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "Model", "", "", "missing", "400", "FALSE", "Model is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "DatePurchased", "", "", "\"\"", "400", "FALSE", "DatePurchased is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "DatePurchased", "", "", "null", "400", "FALSE", "DatePurchased is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "DatePurchased", "", "", "missing", "400", "FALSE", "DatePurchased is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "DatePurchased", "", "", "2007-12-16T00:00:00", "400", "FALSE", "DatePurchased must be after YearOfManufacture.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "PostCodeParkedOvernight", "", "", "\"\"", "400", "FALSE", "PostCodeParkedOvernight is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "PostCodeParkedOvernight", "", "", "null", "400", "FALSE", "PostCodeParkedOvernight is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "PostCodeParkedOvernight", "", "", "missing", "400", "FALSE", "PostCodeParkedOvernight is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "PostCodeParkedOvernight", "", "", "abcdfdd", "400", "FALSE", "PostCodeParkedOvernight is incorrect.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "ClassOfUse", "", "", "\"\"", "400", "FALSE", "ClassOfUse is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "ClassOfUse", "", "", "null", "400", "FALSE", "ClassOfUse is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "ClassOfUse", "", "", "missing", "400", "FALSE", "ClassOfUse is required.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "ClassOfUse", "", "", "AB", "400", "FALSE", "ClassOfUse is invalid.", new string[0])]
        [Xunit.InlineDataAttribute("Risk", "Product", "Vehicle", "VehicleDetail", "Mileage", "", "", "File: VehicleDetailMileage871CNSBike.json", "400", "FALSE", "At least one mileage element must be added.", new string[0])]
        public virtual void ValiDateQuoteAPIOnEachField(string level1, string level2, string level3, string level4, string level5, string level6, string level7, string value, string statusCode, string isSuccess, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "QuoteServices"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Level1", level1);
            argumentsOfScenario.Add("Level2", level2);
            argumentsOfScenario.Add("Level3", level3);
            argumentsOfScenario.Add("Level4", level4);
            argumentsOfScenario.Add("Level5", level5);
            argumentsOfScenario.Add("Level6", level6);
            argumentsOfScenario.Add("Level7", level7);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("IsSuccess", isSuccess);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ValiDate quote API on each field", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table320 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value1"});
                table320.AddRow(new string[] {
                            "Url",
                            "QuoteApi"});
                table320.AddRow(new string[] {
                            "ApiVersion",
                            "V2"});
                table320.AddRow(new string[] {
                            "Context",
                            "CNSelectBikeContext"});
                table320.AddRow(new string[] {
                            "JsonBodyFile",
                            "ValidQuoteCNSBike.json"});
#line 7
 testRunner.Given("The customer has", ((string)(null)), table320, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                            "Level1",
                            "Level2",
                            "Level3",
                            "Level4",
                            "Level5",
                            "Level6",
                            "Level7",
                            "Value"});
                table321.AddRow(new string[] {
                            string.Format("{0}", level1),
                            string.Format("{0}", level2),
                            string.Format("{0}", level3),
                            string.Format("{0}", level4),
                            string.Format("{0}", level5),
                            string.Format("{0}", level6),
                            string.Format("{0}", level7),
                            string.Format("{0}", value)});
#line 13
 testRunner.When("The customer call quote API", ((string)(null)), table321, "When ");
#line hidden
#line 16
 testRunner.Then(string.Format("The message should be shown {0},{1},\"{2}\"", statusCode, isSuccess, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                QuoteSingleFieldDataValidationCasesPart2Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                QuoteSingleFieldDataValidationCasesPart2Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

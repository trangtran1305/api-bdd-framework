// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AtlantaApi.Feature.ANVanClassic.Aggregator.V2
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CheckDataAfterPaymentByDeepLinksFeature : object, Xunit.IClassFixture<CheckDataAfterPaymentByDeepLinksFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CheckDataPaymentByDeepLink.feature"
#line hidden
        
        public CheckDataAfterPaymentByDeepLinksFeature(CheckDataAfterPaymentByDeepLinksFeature.FixtureData fixtureData, AtlantaApi_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature/ANVanClassic/Aggregator/V2", "CheckDataAfterPaymentByDeepLinks", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Check Data after Payment By Deep Links annual")]
        [Xunit.TraitAttribute("FeatureTitle", "CheckDataAfterPaymentByDeepLinks")]
        [Xunit.TraitAttribute("Description", "Check Data after Payment By Deep Links annual")]
        [Xunit.TraitAttribute("Category", "TrackingServices")]
        [Xunit.InlineDataAttribute("200", "pc/confirmation?", "25", "25", new string[0])]
        public virtual void CheckDataAfterPaymentByDeepLinksAnnual(string statusCode, string messages, string quoteResults, string buyResults, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TrackingServices"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Messages", messages);
            argumentsOfScenario.Add("QuoteResults", quoteResults);
            argumentsOfScenario.Add("BuyResults", buyResults);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check Data after Payment By Deep Links annual", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table57.AddRow(new string[] {
                            "Uri",
                            "/api/V2/payment/outcome/A//AN//Autonet%20Car//PC//SCAR"});
                table57.AddRow(new string[] {
                            "WebHookBody",
                            "WebHookBodyAutonetVan.json"});
                table57.AddRow(new string[] {
                            "QuoteRequestBody",
                            "ValidQuoteAutonetVanAggSite.json"});
                table57.AddRow(new string[] {
                            "PaymentRequestBody",
                            "RegisterPaymentRequestBodyAutonetVan.json"});
                table57.AddRow(new string[] {
                            "SaveMarketingRequestBody",
                            "SaveMarketingRequestBodyAutonetVan.json"});
                table57.AddRow(new string[] {
                            "SaveDebitRequestBody",
                            "SaveDebitRequestBodyAutonetVan.json"});
                table57.AddRow(new string[] {
                            "SavePaymentInfoRequestBody",
                            "SavePaymentInfoRequestBodyAutonetVan.json"});
                table57.AddRow(new string[] {
                            "ApiVersion",
                            "V2"});
                table57.AddRow(new string[] {
                            "ContextName",
                            "AutonetVan"});
                table57.AddRow(new string[] {
                            "PaymentMethod",
                            "Annual"});
#line 7
 testRunner.Given("User has wrapUp table", ((string)(null)), table57, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Level1",
                            "Level2",
                            "Level3",
                            "Level4",
                            "Level5",
                            "Level6",
                            "Level7",
                            "Value",
                            "Description"});
                table58.AddRow(new string[] {
                            "risk",
                            "proposer",
                            "address",
                            "postCode",
                            "",
                            "",
                            "",
                            "SW81TF",
                            "pcd"});
                table58.AddRow(new string[] {
                            "risk",
                            "proposer",
                            "dateOfBirth",
                            "",
                            "",
                            "",
                            "",
                            "1980-02-01",
                            "brd"});
                table58.AddRow(new string[] {
                            "risk",
                            "affinity",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "MCAR",
                            "affinity"});
#line 19
 testRunner.When("User perform payment after DeepLink", ((string)(null)), table58, "When ");
#line hidden
#line 25
 testRunner.And("User send WebHook request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.Then(string.Format("Webhook response returns {0} and {1}", statusCode, messages), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.And(string.Format("Result in Quote request is recorded successfully in Tracking Database {0}", quoteResults), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And(string.Format("Result in Buy request is recorded successfully in Tracking Database {0}", buyResults), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("SchemeCode in Quote response is recorded successfully in Tracking Database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Check Data after Payment By Deep Links monthly")]
        [Xunit.TraitAttribute("FeatureTitle", "CheckDataAfterPaymentByDeepLinks")]
        [Xunit.TraitAttribute("Description", "Check Data after Payment By Deep Links monthly")]
        [Xunit.InlineDataAttribute("200", "pc/confirmation?", "25", "25", new string[0])]
        public virtual void CheckDataAfterPaymentByDeepLinksMonthly(string statusCode, string messages, string quoteResults, string buyResults, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Messages", messages);
            argumentsOfScenario.Add("QuoteResults", quoteResults);
            argumentsOfScenario.Add("BuyResults", buyResults);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check Data after Payment By Deep Links monthly", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table59.AddRow(new string[] {
                            "Uri",
                            "/api/V2/payment/outcome/A//AN//Autonet%20Car//PC//SCAR"});
                table59.AddRow(new string[] {
                            "WebHookBody",
                            "WebHookBodyAutonetVan.json"});
                table59.AddRow(new string[] {
                            "QuoteRequestBody",
                            "ValidQuoteAutonetVanAggSite.json"});
                table59.AddRow(new string[] {
                            "PaymentRequestBody",
                            "RegisterPaymentRequestBodyAutonetVan.json"});
                table59.AddRow(new string[] {
                            "SaveMarketingRequestBody",
                            "SaveMarketingRequestBodyAutonetVan.json"});
                table59.AddRow(new string[] {
                            "SaveDebitRequestBody",
                            "SaveDebitRequestBodyAutonetVan.json"});
                table59.AddRow(new string[] {
                            "SavePaymentInfoRequestBody",
                            "SavePaymentInfoRequestBodyAutonetVan.json"});
                table59.AddRow(new string[] {
                            "ApiVersion",
                            "V2"});
                table59.AddRow(new string[] {
                            "ContextName",
                            "AutonetVan"});
                table59.AddRow(new string[] {
                            "PaymentMethod",
                            "Monthly"});
#line 35
 testRunner.Given("User has wrapUp table", ((string)(null)), table59, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Level1",
                            "Level2",
                            "Level3",
                            "Level4",
                            "Level5",
                            "Level6",
                            "Level7",
                            "Value",
                            "Description"});
                table60.AddRow(new string[] {
                            "risk",
                            "proposer",
                            "address",
                            "postCode",
                            "",
                            "",
                            "",
                            "SW81TF",
                            "pcd"});
                table60.AddRow(new string[] {
                            "risk",
                            "proposer",
                            "dateOfBirth",
                            "",
                            "",
                            "",
                            "",
                            "1980-02-01",
                            "brd"});
                table60.AddRow(new string[] {
                            "risk",
                            "affinity",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "MCAR",
                            "affinity"});
#line 47
 testRunner.When("User perform payment after DeepLink", ((string)(null)), table60, "When ");
#line hidden
#line 53
 testRunner.And("User send WebHook request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.Then(string.Format("Webhook response returns {0} and {1}", statusCode, messages), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.And(string.Format("Result in Quote request is recorded successfully in Tracking Database {0}", quoteResults), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And(string.Format("Result in Buy request is recorded successfully in Tracking Database {0}", buyResults), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("SchemeCode in Quote response is recorded successfully in Tracking Database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CheckDataAfterPaymentByDeepLinksFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CheckDataAfterPaymentByDeepLinksFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

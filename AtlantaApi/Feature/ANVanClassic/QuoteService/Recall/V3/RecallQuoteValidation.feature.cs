// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AtlantaApi.Feature.ANVanClassic.QuoteService.Recall.V3
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "AutonetVan")]
    public partial class SendRecallQuoteRequestValidationFeature : object, Xunit.IClassFixture<SendRecallQuoteRequestValidationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "AutonetVan"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RecallQuoteValidation.feature"
#line hidden
        
        public SendRecallQuoteRequestValidationFeature(SendRecallQuoteRequestValidationFeature.FixtureData fixtureData, AtlantaApi_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature/ANVanClassic/QuoteService/Recall/V3", "Send Recall Quote request validation", null, ProgrammingLanguage.CSharp, new string[] {
                        "AutonetVan"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Send Recall Quote request validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Send Recall Quote request validation")]
        [Xunit.TraitAttribute("Description", "Send Recall Quote request validation")]
        [Xunit.TraitAttribute("Category", "QuoteServices")]
        [Xunit.InlineDataAttribute("WebReference", "null", "400", "WebReference is required.", new string[0])]
        [Xunit.InlineDataAttribute("WebReference", "58855-42814-86330faf", "400", "Web Reference is invalid.", new string[0])]
        [Xunit.InlineDataAttribute("WebReference", "58855-42814-86330", "400", "Web Reference is invalid.", new string[0])]
        [Xunit.InlineDataAttribute("PostCode", "GIRb 0AA", "400", "This is not a recognized UK postcode format.", new string[0])]
        [Xunit.InlineDataAttribute("PostCode", "ST35ED", "200", "Get quote successfully", new string[0])]
        [Xunit.InlineDataAttribute("PostCode", "st3 5ed", "200", "Get quote successfully", new string[0])]
        [Xunit.InlineDataAttribute("PostCode", "ST3 5ED", "200", "Get quote successfully", new string[0])]
        [Xunit.InlineDataAttribute("PostCode", "null", "400", "PostCode is required.", new string[0])]
        [Xunit.InlineDataAttribute("DateOfBirth", "missing", "400", "DateOfBirth is required.", new string[0])]
        [Xunit.InlineDataAttribute("DateOfBirth", "null", "400", "Error converting value {null} to type \'System.DateTime\'. Path \'DateOfBirth\'", new string[0])]
        [Xunit.InlineDataAttribute("DateOfBirth", "2008-01-10", "400", "DateOfBirth must be between 16~125.", new string[0])]
        [Xunit.InlineDataAttribute("DateOfBirth", "1894-11-14", "400", "DateOfBirth must be between 16~125.", new string[0])]
        [Xunit.InlineDataAttribute("DateOfBirth", "1959-16-16", "400", "Could not convert string to DateTime: 1959-16-16. Path \'DateOfBirth\'", new string[0])]
        [Xunit.InlineDataAttribute("DateOfBirth", "1980-02-01", "200", "Get quote successfully", new string[0])]
        [Xunit.InlineDataAttribute("WebReference", "123-324-456", "400", "Web Reference is invalid", new string[0])]
        [Xunit.InlineDataAttribute("PostCode", "M1 1AE", "400", "Web Reference is invalid", new string[0])]
        [Xunit.InlineDataAttribute("DateOfBirth", "1990-01-02", "400", "Web Reference is invalid", new string[0])]
        public virtual void SendRecallQuoteRequestValidation(string level1, string value, string statusCode, string messages, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "QuoteServices"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Level1", level1);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Messages", messages);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send Recall Quote request validation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table76.AddRow(new string[] {
                            "QuoteRequestBody",
                            "ValidQuoteAutonetVanSuccessForRecall.json"});
                table76.AddRow(new string[] {
                            "RecallRequestBody",
                            "RecallBodyAutonetVan.json"});
                table76.AddRow(new string[] {
                            "ApiVersion",
                            "V3"});
                table76.AddRow(new string[] {
                            "ContextName",
                            "AutonetVan"});
#line 11
 testRunner.Given("User has recall body", ((string)(null)), table76, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "Level1",
                            "Value"});
                table77.AddRow(new string[] {
                            string.Format("{0}", level1),
                            string.Format("{0}", value)});
#line 17
 testRunner.When("User send recall service with data change", ((string)(null)), table77, "When ");
#line hidden
#line 20
 testRunner.Then(string.Format("Recall response returns {0} and {1}", statusCode, messages), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SendRecallQuoteRequestValidationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SendRecallQuoteRequestValidationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

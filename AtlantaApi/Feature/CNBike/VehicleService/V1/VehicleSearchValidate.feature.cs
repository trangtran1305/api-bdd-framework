// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AtlantaApi.Feature.CNBike.VehicleService.V1
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "CNBike")]
    public partial class VehicleSearchValidateFeature : object, Xunit.IClassFixture<VehicleSearchValidateFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "CNBike"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "VehicleSearchValidate.feature"
#line hidden
        
        public VehicleSearchValidateFeature(VehicleSearchValidateFeature.FixtureData fixtureData, AtlantaApi_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature/CNBike/VehicleService/V1", "VehicleSearchValidate", null, ProgrammingLanguage.CSharp, new string[] {
                        "CNBike"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validate Search API on each field with valid")]
        [Xunit.TraitAttribute("FeatureTitle", "VehicleSearchValidate")]
        [Xunit.TraitAttribute("Description", "Validate Search API on each field with valid")]
        [Xunit.TraitAttribute("Category", "VehicleServices")]
        [Xunit.InlineDataAttribute("Make", "null", "400", "Make is required.", "ValidateSearchCNBikeAPI1", new string[0])]
        [Xunit.InlineDataAttribute("YearOfManufacture", "1899", "400", "YearOfManufacture is invalid.", "ValidateSearchCNBikeAPI2", new string[0])]
        [Xunit.InlineDataAttribute("YearOfManufacture", "2020", "200", "Search vehicle successfully.", "ValidateSearchCNBikeAPI3", new string[0])]
        [Xunit.InlineDataAttribute("FuelType", "K", "400", "FuelType is invalid.", "ValidateSearchCNBikeAPI4", new string[0])]
        [Xunit.InlineDataAttribute("FuelType", "k", "400", "FuelType is invalid.", "ValidateSearchCNBikeAPI5", new string[0])]
        [Xunit.InlineDataAttribute("FuelType", "null", "200", "Search vehicle successfully.", "ValidateSearchCNBikeAPI6", new string[0])]
        [Xunit.InlineDataAttribute("FuelType", "D", "200", "Search vehicle successfully.", "ValidateSearchCNBikeAPI7", new string[0])]
        [Xunit.InlineDataAttribute("FuelType", "\\b D \\b", "200", "Search vehicle successfully.", "ValidateSearchCNBikeAPI8", new string[0])]
        [Xunit.InlineDataAttribute("Transmission", "X", "400", "Transmission is invalid.", "ValidateSearchCNBikeAPI9", new string[0])]
        [Xunit.InlineDataAttribute("Transmission", "A", "200", "Search vehicle successfully.", "ValidateSearchCNBikeAPI10", new string[0])]
        [Xunit.InlineDataAttribute("Transmission", "null", "200", "Search vehicle successfully.", "ValidateSearchCNBikeAPI11", new string[0])]
        [Xunit.InlineDataAttribute("EngineCC", "-1", "400", "EngineCC must be a number greater than 0", "ValidateSearchCNBikeAPI12", new string[0])]
        [Xunit.InlineDataAttribute("EngineCC", "3.14", "400", "EngineCC must be a number greater than 0", "ValidateSearchCNBikeAPI13", new string[0])]
        [Xunit.InlineDataAttribute("EngineCC", "1", "200", "Search vehicle successfully.", "ValidateSearchCNBikeAPI14", new string[0])]
        [Xunit.InlineDataAttribute("EngineCC", "null", "200", "Search vehicle successfully.", "ValidateSearchCNBikeAPI15", new string[0])]
        public virtual void ValidateSearchAPIOnEachFieldWithValid(string level1, string value, string statusCode, string message, string key, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VehicleServices"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Level1", level1);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Message", message);
            argumentsOfScenario.Add("Key", key);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Search API on each field with valid", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table274.AddRow(new string[] {
                            "VehicleRequestBody",
                            "VehicleSearchBodyCNBike.json"});
                table274.AddRow(new string[] {
                            "ApiVersion",
                            "V1"});
                table274.AddRow(new string[] {
                            "ContextName",
                            "CNBikeContext"});
#line 7
 testRunner.Given("User has search vehicle bodyjson", ((string)(null)), table274, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                            "Level1",
                            "Value"});
                table275.AddRow(new string[] {
                            string.Format("{0}", level1),
                            string.Format("{0}", value)});
#line 12
 testRunner.When(string.Format("The customer call vehicle search API using {0}", key), ((string)(null)), table275, "When ");
#line hidden
#line 15
 testRunner.Then(string.Format("The Vehicle response should be shown {0} and {1} and {2}", statusCode, message, key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                VehicleSearchValidateFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                VehicleSearchValidateFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AtlantaApi.Feature.SafeGuard.VehicleService.V1
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "SafeGuardMH")]
    public partial class GetVehicleLookupByVRNFeature : object, Xunit.IClassFixture<GetVehicleLookupByVRNFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "SafeGuardMH"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GetVehicleLookupByVRN.feature"
#line hidden
        
        public GetVehicleLookupByVRNFeature(GetVehicleLookupByVRNFeature.FixtureData fixtureData, AtlantaApi_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature/SafeGuard/VehicleService/V1", "GetVehicleLookupByVRN", "\tVehicle lookup by VRN", ProgrammingLanguage.CSharp, new string[] {
                        "SafeGuardMH"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table425 = new TechTalk.SpecFlow.Table(new string[] {
                        "Properties",
                        "Value"});
            table425.AddRow(new string[] {
                        "Context",
                        "SafeGuardMH"});
            table425.AddRow(new string[] {
                        "APIVersion",
                        "V1"});
            table425.AddRow(new string[] {
                        "Endpoint",
                        "VehicleLookupVRN"});
#line 6
 testRunner.Given("A request vehicle lookup by VRN has", ((string)(null)), table425, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get vehicle lookup by VRN Succesffully")]
        [Xunit.TraitAttribute("FeatureTitle", "GetVehicleLookupByVRN")]
        [Xunit.TraitAttribute("Description", "Get vehicle lookup by VRN Succesffully")]
        [Xunit.TraitAttribute("Category", "VehicleServices")]
        [Xunit.InlineDataAttribute("PX05JNO", "200", "Get successfully", "FORD", "TRANSIT 260 SWB", "1998", "2001-2006", "2005-05-01", "D", "M", "90309975", "FO4650", "2005-05-01", new string[0])]
        public virtual void GetVehicleLookupByVRNSuccesffully(string vRN, string statusCode, string message, string make, string model, string engine, string fromToYear, string manufactureDate, string fuel, string transmission, string abiCode, string cdlCode, string registrationDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VehicleServices"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("VRN", vRN);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Message", message);
            argumentsOfScenario.Add("Make", make);
            argumentsOfScenario.Add("Model", model);
            argumentsOfScenario.Add("Engine", engine);
            argumentsOfScenario.Add("FromToYear", fromToYear);
            argumentsOfScenario.Add("ManufactureDate", manufactureDate);
            argumentsOfScenario.Add("Fuel", fuel);
            argumentsOfScenario.Add("Transmission", transmission);
            argumentsOfScenario.Add("AbiCode", abiCode);
            argumentsOfScenario.Add("CdlCode", cdlCode);
            argumentsOfScenario.Add("RegistrationDate", registrationDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vehicle lookup by VRN Succesffully", "\t\tThe VRN is valid value", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 15
 testRunner.When(string.Format("An user sends the request with Reg Number is \"{0}\"", vRN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.Then(string.Format("The response should have {0}, \"{1}\", \"{2}\", \"{3}\", \"{4}\", \"{5}\", \"{6}\", \"{7}\", \"{" +
                            "8}\", \"{9}\", \"{10}\", \"{11}\"", statusCode, message, make, model, engine, fromToYear, manufactureDate, fuel, transmission, abiCode, cdlCode, registrationDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get vehicle lookup by VRN Invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "GetVehicleLookupByVRN")]
        [Xunit.TraitAttribute("Description", "Get vehicle lookup by VRN Invalid")]
        [Xunit.TraitAttribute("Category", "VehicleServices")]
        [Xunit.InlineDataAttribute("", "400", "RegistrationNumber is required.", new string[0])]
        [Xunit.InlineDataAttribute("PX05JNK", "500", "Value cannot be null. (Parameter \'source\')", new string[0])]
        public virtual void GetVehicleLookupByVRNInvalid(string vRN, string statusCode, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VehicleServices"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("VRN", vRN);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get vehicle lookup by VRN Invalid", "\t\t1. The VRN is empty\r\n\t\t2. The VRN is not existing value", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 25
 testRunner.When(string.Format("An user sends the request with Reg Number is \"{0}\"", vRN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then(string.Format("The response should have {0}, \"{1}\"", statusCode, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetVehicleLookupByVRNFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetVehicleLookupByVRNFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AtlantaApi.Feature.SafeGuard.VehicleService.V1
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "SafeGuardMH")]
    public partial class VerifyListOfManufacturerTypeReturnedWhenNoErrorManufatureFeature : object, Xunit.IClassFixture<VerifyListOfManufacturerTypeReturnedWhenNoErrorManufatureFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "SafeGuardMH"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "VerifyListOfVehicleTypeReturnedWhenNoError.feature"
#line hidden
        
        public VerifyListOfManufacturerTypeReturnedWhenNoErrorManufatureFeature(VerifyListOfManufacturerTypeReturnedWhenNoErrorManufatureFeature.FixtureData fixtureData, AtlantaApi_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature/SafeGuard/VehicleService/V1", "Verify List Of manufacturer Type Returned When No Error Manufature", null, ProgrammingLanguage.CSharp, new string[] {
                        "SafeGuardMH"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify List Of Vehicle Type Returned When No Error")]
        [Xunit.TraitAttribute("FeatureTitle", "Verify List Of manufacturer Type Returned When No Error Manufature")]
        [Xunit.TraitAttribute("Description", "Verify List Of Vehicle Type Returned When No Error")]
        [Xunit.TraitAttribute("Category", "VehicleServices")]
        [Xunit.InlineDataAttribute("vehicletypes", "VehicleTypes", "200", "Get data successfully", new string[0])]
        [Xunit.InlineDataAttribute("manufacturer", "Make_Model_DUQ", "200", "Get data successfully", new string[0])]
        [Xunit.InlineDataAttribute("basevehiclemake", "BaseVehicles", "200", "Get data successfully", new string[0])]
        [Xunit.InlineDataAttribute("model", "Make_Model_DUQ", "200", "Get data successfully", new string[0])]
        public virtual void VerifyListOfVehicleTypeReturnedWhenNoError(string requestType, string sheetName, string statusCode, string messages, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VehicleServices"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("RequestType", requestType);
            argumentsOfScenario.Add("SheetName", sheetName);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Messages", messages);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify List Of Vehicle Type Returned When No Error", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table431 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table431.AddRow(new string[] {
                            "DataFile",
                            "Motorhome_VehicleType_Make_Model_DUQ_Matrix.xlsx"});
                table431.AddRow(new string[] {
                            "ApiVersion",
                            "V1"});
                table431.AddRow(new string[] {
                            "ContextName",
                            "SafeGuardMH"});
#line 11
 testRunner.Given("User has Vehicle Type API Information", ((string)(null)), table431, "Given ");
#line hidden
#line 16
 testRunner.When(string.Format("User sends get Vehicle Type request with {0} and {1}", requestType, sheetName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then(string.Format("The response should be shown as per Data File using {0}", requestType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                VerifyListOfManufacturerTypeReturnedWhenNoErrorManufatureFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                VerifyListOfManufacturerTypeReturnedWhenNoErrorManufatureFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

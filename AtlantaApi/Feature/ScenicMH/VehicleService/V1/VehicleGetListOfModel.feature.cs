// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AtlantaApi.Feature.ScenicMH.VehicleService.V1
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "ScenicMH")]
    public partial class VehicleGetListOfModelsFeature : object, Xunit.IClassFixture<VehicleGetListOfModelsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "ScenicMH"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "VehicleGetListOfModel.feature"
#line hidden
        
        public VehicleGetListOfModelsFeature(VehicleGetListOfModelsFeature.FixtureData fixtureData, AtlantaApi_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature/ScenicMH/VehicleService/V1", "Vehicle Get List Of Models", null, ProgrammingLanguage.CSharp, new string[] {
                        "ScenicMH"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Vehicle Validate Get List Of Models")]
        [Xunit.TraitAttribute("FeatureTitle", "Vehicle Get List Of Models")]
        [Xunit.TraitAttribute("Description", "Vehicle Validate Get List Of Models")]
        [Xunit.TraitAttribute("Category", "VehicleServices")]
        [Xunit.InlineDataAttribute("ModelList", "POST", "Valid", "404", "NotFound", "False", new string[0])]
        [Xunit.InlineDataAttribute("ModelList", "GET", "Invalid", "401", "Unauthorized", "False", new string[0])]
        [Xunit.InlineDataAttribute("ModelList1", "GET", "Invalid", "404", "NotFound", "False", new string[0])]
        public virtual void VehicleValidateGetListOfModels(string endpoint, string method, string token, string statusCode, string messages, string isSuccess, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VehicleServices"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("Method", method);
            argumentsOfScenario.Add("Token", token);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Messages", messages);
            argumentsOfScenario.Add("IsSuccess", isSuccess);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vehicle Validate Get List Of Models", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table498 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table498.AddRow(new string[] {
                            "VehicleRequestBody",
                            "VehicleTypeBody.json"});
                table498.AddRow(new string[] {
                            "ApiVersion",
                            "V1"});
                table498.AddRow(new string[] {
                            "ContextName",
                            "ScenicMotorHome"});
#line 11
 testRunner.Given("User has vehicle info", ((string)(null)), table498, "Given ");
#line hidden
#line 16
 testRunner.And("User sends Get Vehicle Type request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And("User sends Get Manufacturer request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.When(string.Format("User sends Get request using {0} and {1} and {2}", endpoint, method, token), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then(string.Format("The {0} response should be shown: {1} and {2} and {3}", endpoint, statusCode, messages, isSuccess), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Vehicle Validate Get List Of Models with no content")]
        [Xunit.TraitAttribute("FeatureTitle", "Vehicle Get List Of Models")]
        [Xunit.TraitAttribute("Description", "Vehicle Validate Get List Of Models with no content")]
        [Xunit.TraitAttribute("Category", "VehicleServices")]
        [Xunit.InlineDataAttribute("ModelList", "-1", "0", "GET", "Valid", "204", "NoContent", "False", new string[0])]
        public virtual void VehicleValidateGetListOfModelsWithNoContent(string endpoint, string manufacturerId, string vehicleTypeId, string method, string token, string statusCode, string messages, string isSuccess, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VehicleServices"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("ManufacturerId", manufacturerId);
            argumentsOfScenario.Add("VehicleTypeId", vehicleTypeId);
            argumentsOfScenario.Add("Method", method);
            argumentsOfScenario.Add("Token", token);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Messages", messages);
            argumentsOfScenario.Add("IsSuccess", isSuccess);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vehicle Validate Get List Of Models with no content", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table499 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table499.AddRow(new string[] {
                            "ApiVersion",
                            "V1"});
                table499.AddRow(new string[] {
                            "ContextName",
                            "ScenicMotorHome"});
#line 29
 testRunner.Given("User has vehicle info", ((string)(null)), table499, "Given ");
#line hidden
#line 34
 testRunner.And("User sends Get Vehicle Type request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("User sends Get Manufacturer request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.When(string.Format("User sends Get Model request using {0} and {1}", manufacturerId, vehicleTypeId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then(string.Format("The {0} response should be shown: {1} and {2} and {3}", endpoint, statusCode, messages, isSuccess), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                VehicleGetListOfModelsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                VehicleGetListOfModelsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
